version: '3'
services:
  # 服务名称
  nginx:
    # 镜像:版本
    image: nginx:latest
    container_name: my_nginx
    # 映射容器80端口到本地80端口
    ports:
     - "80:80"
    # 当容器意外挂掉时重新启动容器，类似于pm2，所以不必再在容器内使用pm2
    restart: on-failure
    # 数据卷 映射本地文件到容器
    volumes:
    # 映射nginx.conf文件到容器的/etc/nginx/conf.d目录并覆盖default.conf文件
    #- ./nginx.conf:/etc/nginx/conf.d/default.conf
    # 映射build文件夹到容器的/usr/share/nginx/html文件夹
     - ./build:/usr/share/nginx/html
    # 覆盖容器启动后默认执行的命令。
    command: /bin/bash -c "nginx -g 'daemon off;'"


#    启动命令；
#    docker-compose up -d

#    关闭容器：
#    docker-compose down

-------------------------------
https://juejin.im/post/5ddb3f85e51d45231576af3c
https://juejin.im/post/5cce4b1cf265da0373719819
https://juejin.im/post/5d8440ebe51d4561eb0b2751
https://juejin.im/post/5de09f1e6fb9a0715c2f9e44
https://juejin.im/post/5d109b996fb9a07ee30e251e
https://github.com/ant-design/ant-design-pro/blob/master/azure-pipelines.yml
https://juejin.im/post/5d2b43fce51d45108f2542a0
https://github.com/axetroy/blog/issues/178
https://www.hulunhao.com/docker/build-front-end-docker-application/
https://juejin.im/post/5c17492ef265da614e2bfc47
https://github.com/chaban/phasty-micro/blob/master/docker-compose.yml

-------------------------------

  # build stage
FROM node:lts-alpine as build-stage
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

  # production stage
FROM nginx:stable-alpine as production-stage
COPY --from=build-stage /app/dist /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

--------------------------------

version: "3.6"
services:
  vue:
    build:
      context: .
      dockerfile: ./docker/vue/Dockerfile
      args:
        NODE_ENV: "development"
    command: npm run dev
    volumes:
      - .:/code
      - /code/node_modules
    ports:
      - "3000:3000"
    networks:
      - webnet
    env_file: ./config/.env
    environment:
      HOST: "0.0.0.0"

networks:
  webnet:

-------------------
FROM node:10-alpine

ENV PORT 8080

WORKDIR /usr/src/app

COPY package*.json ./

RUN apk update && apk add bash
RUN npm i -g nodemon
RUN yarn

COPY . .

EXPOSE $PORT

version: '3'

services:
  web:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: vue_ssr_image
    container_name: web
    command: >
      sh -c "yarn build && nodemon server"
    ports:
      - '80:8080'
    restart: always
    volumes:
      - .:/usr/src/app/
      - /usr/src/app/node_modules

------------------------

# этап сборки (build stage)
FROM node:lts-alpine as develop-stage
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
#RUN npm run serve

# этап сборки (build stage)
FROM develop-stage as build-stage
RUN npm run build

# этап production (production-stage)
FROM nginx:stable-alpine as production-stage
COPY --from=build-stage /app/dist /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

version: '3.7'
services:
  frontend:
    build:
      context: .
      dockerfile: SPA.Dockerfile
      target: 'develop-stage'
    ports:
      - '3000:3000'
    restart: on-failure
    volumes:
      - '.:/app'
      - '/app/node_modules/'
    command: ["npm", "run", "serve"]
    environment:
      - CHOKIDAR_USEPOLLING=true

------------------------

FROM node:lts-alpine as develop-stage
ENV APP_ROOT /app
WORKDIR ${APP_ROOT}
COPY package*.json ./
RUN npm install
COPY . .
#RUN npm run serve

# этап сборки (build stage)
FROM develop-stage as build-stage
RUN npm run build

# этап production (production-stage)
FROM build-stage as production-stage
EXPOSE 3000
CMD ["npm", "run", "start"]

version: '3.7'
services:
  frontend:
    build:
      context: .
      dockerfile: SSR.Dockerfile
      target: 'develop-stage'
    ports:
      - '3000:3000'
    volumes:
      - '.:/app'
      - '/app/node_modules/'
    command: ["npm", "run", "dev"]
    environment:
      - CHOKIDAR_USEPOLLING=true

------------------------

FROM node:alpine

# Create app directory
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app


ONBUILD COPY . /usr/src/app/
ONBUILD RUN npm install

# Build app
ONBUILD RUN npm run build

ENV HOST 0.0.0.0
EXPOSE 3000

# start command
CMD [ "npm", "start" ]


version: '3'
services:

  front:
    image: antoine/nuxt
    ports:
    - 1515:3000
    volumes:
    - ./:/usr/src/app/

version: '3'
services:

  front:
    image: antoine/nuxt
    expose:
    - "80"
    - "443"
    volumes:
    - ./:/usr/src/app/
    environment:
      VIRTUAL_HOST: node.antoinebrossault.com
      LETSENCRYPT_HOST: node.antoinebrossault.com
      LETSENCRYPT_EMAIL: antoinebrossault@gmail.com

networks:
  default:
    external:
      name: nginx-proxy

---------------------------

#设置基础镜像
FROM daocloud.io/library/node:latest
#维护者信息
MAINTAINER wuming wuming@maihaoche.com
#在容器中新建一个myDocker文件中
RUN mkdir myDocker
#将Dockerfile所在目录中myDocker文件夹的内容加到目标容器中的myDocker文件夹中
ADD myDocker  /myDocker
#设置工作目录
WORKDIR /myDocker
#执行安装项目依赖包的命令
RUN npm install
#容器启动时，执行node app.js
CMD node app.js

---------------------------

FROM node:alpine as builder

ENV PROJECT_ENV production

# http-server 不變動也可以利用緩存
WORKDIR /code

ADD package.json /code
RUN npm install --production

ADD . /code
# npm run uploadCdn 是把靜態資源上傳至 cdn 上的腳本文件
RUN npm run build && npm run uploadCdn

# 選擇更小體積的基礎鏡像
FROM nginx:alpine
COPY --from=builder code/public/index.html code/public/favicon.ico /usr/share/nginx/html/
COPY --from=builder code/public/static /usr/share/nginx/html/static

---------------------------
