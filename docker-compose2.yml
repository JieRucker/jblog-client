#
#version: "3"
#
#services:
#  web:
#    image: node:10.7.0-alpine
#    user: node
#    working_dir: /home/node/app
#    environment:
#    - PORT=3000
#    volumes:
#    - ./:/home/node/app # 将本地目录映射到容器内
#    command: npm run prod
#    ports:
#    - 3000:3000 # 本地端口:容器端口
#
#  nginx:
#    image: nginx:1.12.2-alpine
#    restart: always
#    working_dir: /home/work
#    volumes:
#    - ./nginx.conf:/etc/nginx/nginx.conf # 映射 nginx 配置文件
#    ports:
#    - 8081:80 # 绑定容器的80端口到本的1080端口
#    links:
#    - web:koaserver # 给它取个别名，叫做 koaserver







version: "3"

networks:
  my-network:
    driver: bridge

volumes:
  node_modules:
  mongo_data:

services:

  nodejs:
    build:
      context: .
      dockerfile: ./node/Dockerfile
    container_name: my-node
    working_dir: /home/app
    ports:
      - 8081:8081
    volumes:
    #      - ./node:/home/app/
    #      - node_modules:/home/app/node_modules
    restart: always
    #    depends_on:
    #      - mongo
    networks:
      - my-network

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
      args:
        NODE_ENV: "production"
    container_name: my-nginx
    ports:
      -  80:80
      -  443:443
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/cert:/etc/nginx/cert
      - ./logs/nginx:/var/log/nginx
      - dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    command: nginx
    restart: always
    depends_on:
      - nodejs
    networks:
      - my-network

#  mongo:
#    build:
#      context: .
#      dockerfile: ./mongo/Dockerfile
#    ports:
#      - 27017:27017
#    volumes:
##      - mongo_data:/data/db
#    restart: always
#    networks:
#      - my-network


